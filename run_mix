#!/bin/bash
set -e
source .env

# Setting up the PATH environment
#[ -s /opt/homebrew/bin/brew ] && eval $(/opt/homebrew/bin/brew shellenv)
#[ -s /usr/local/bin/brew ] && eval $(/usr/local/bin/brew shellenv)

# This loads nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  

# This loads asdf
if [ -s "$HOMEBREW_PREFIX/opt/asdf/libexec/asdf.sh" ]; then 
  \. "$HOMEBREW_PREFIX/opt/asdf/libexec/asdf.sh" 
elif [ -s "$HOME/.asdf/asdf.sh" ]; then
  \. "$HOME/.asdf/asdf.sh"
fi

erl -version
whereis erl
elixir --version
whereis elixir
asdf current

BASE=`pwd`
export MIX_ENV=prod
export MIX_TARGET=ios

mix local.hex --force --if-missing
mix local.rebar --force --if-missing

rsync -av --delete --exclude 'deps' --exclude '_build' --exclude '.vscode' --exclude '.elixir_ls' ../elixir_desktop_lvn/ elixir-app
# if [ ! -d "elixir-app" ]; then
  
#   git clone https://github.com/adiibanez/desktop-example-app.git elixir-app
#   # git clone --local ../desktop-example-app elixir-app
#   #ln -s ../desktop-example-app elixir-app
# else 
#   cd elixir-app
#   git reset --hard
#   git pull
#   cd ..
# fi

#git pull origin

# ensure there is no "funky" runtime.ex crashing erlang due to reading env variables
if [ -s "elixir-app/config/runtime.ex" ]; then 
  mv "elixir-app/config/runtime.ex" "elixir-app/config/runtime.ex.txt"
fi

# using the right runtime versions
if [ ! -f "elixir/.tool-versions" ]; then
  cp .tool-versions elixir-app/
fi

cd elixir-app
mix deps.get

if [ ! -d "deps/desktop" ]; then
  mix deps.get
fi

if [ ! -d "assets/node_modules" ]; then
  cd assets && npm i && cd ..
fi

if [ -f "$BASE/todoapp/app.zip" ]; then
  rm "$BASE/todoapp/app.zip"
fi

echo "FIND files ..."
find . -name start_erl.data
find . -name asn1rt_nif.so -exec chmod 775 {} \; || true
find . -name asn1rt_nif.so -exec chown $(whoami) {} \; || true
find . -name asn1rt_nif.so -exec ls -lah {} \; || true
find . -name asn1rt_nif.so -exec rm -f {} \; || true

#exit 1
mix assets.deploy --strip false

# find . -name asn1rt_nif.so -exec ls -lah {} \;
# find . -name asn1rt_nif.so -exec chown $(whoami) {} \;
# find . -name asn1rt_nif.so -exec chmod 775 {} \;

mix release --overwrite

# find . -name asn1rt_nif.so -exec ls -lah {} \;
# find . -name asn1rt_nif.so -exec chown $(whoami) {} \;
# find . -name asn1rt_nif.so -exec chmod 775 {} \;

#cd _build/ios_prod/rel/todo_app

cd _build/ios_prod/rel/default_release/
ls -lah 

zip -9r "$BASE/todoapp/app.zip" lib/ releases/ --exclude "*.so" 
#--include "*.data"
# unzip -l "$BASE/todoapp/app.zip"