name: iOS CI

on: ["push", "pull_request"]

jobs:
  build:
    env: 
      ERLANG_VERSION: 26.2.5.6
      ELIXIR_VERSION: 1.16.3-otp-26

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install brew dependencies
      run: |
        # carthage npm
        brew install wxwidgets
    
    - name: Asdf Cache
      uses: actions/cache@v3
      id: asdf-cache
      with:
        path: /Users/runner/.asdf
        #key: macos-asdf-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}
        key: macos-asdf
        
    - name: Install asdf version manager
      run: |
        brew install asdf
        echo '. $(brew --prefix asdf)/libexec/asdf.sh' >> ~/.bashrc
        # echo '. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash' >> ~/.bashrc
        source ~/.bashrc # Load asdf into the current shell

    - name: "Installing Erlang"
      id: asdf-install
      if: steps.asdf-cache.outputs.cache-hit != 'true'
      run: |
        . $(brew --prefix asdf)/libexec/asdf.sh
        asdf plugin add erlang
        asdf plugin add elixir
        asdf plugin add nodejs
        #echo "erlang ref:${{ env.OTP_VERSION }}" >> .tool-versions
        # reset any files in the repo
        echo '' > .tool-versions
        echo "erlang ${{ env.ERLANG_VERSION }}" >> .tool-versions
        echo "elixir ${{ env.ELIXIR_VERSION }}" >> .tool-versions
        echo "nodejs 23.9.0" >> .tool-versions
        export KERL_CONFIGURE_OPTIONS="--enable-parallel-configure --with-wxdir=`brew --prefix wxwidgets` --disable-jit --without-javac --disable-debug CXX='gcc -std=c++11'"
        asdf install

    # - name: Install Erlang and Elixir via asdf
    #   id: asdf-install2
    #   run: |
    #     asdf plugin-add erlang
    #     asdf plugin-add elixir
    #     # Replace with your desired Erlang and Elixir versions
    #     ASDF_ERLANG_VERSION=26.2.5.6
    #     ASDF_ELIXIR_VERSION=1.16.3-otp-26

    #     asdf install erlang $ASDF_ERLANG_VERSION
    #     asdf install elixir $ASDF_ELIXIR_VERSION

    #     asdf global erlang $ASDF_ERLANG_VERSION
    #     asdf global elixir $ASDF_ELIXIR_VERSION

    - name: Set up hex & rebar
      run: |
        #source ~/.bashrc
        . $(brew --prefix asdf)/libexec/asdf.sh
        ls -lah ~/.asdf/installs/elixir/${{ env.ELIXIR_VERSION }}/bin
        asdf current

        mix local.hex --force
        mix local.rebar --force

    - name: Save asdf Cache
      if: steps.asdf-install.outcome == 'success' && steps.asdf-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          /Users/runner/.asdf
        #key:  macos-asdf-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}
        key:  macos-asdf

    - name: Carthage Cache
      uses: actions/cache@v4
      id: carthage-cache
      with:
        path: Carthage # Carthage build directory
        key: carthage-deps-${{ hashFiles('Cartfile.resolved') }}
        restore-keys: |
          carthage-deps-

    - name: Carthage Update
      run: |
        #source ~/.bashrc
        . $(brew --prefix asdf)/libexec/asdf.sh
        carthage update --use-xcframeworks
      if: steps.carthage-cache.outputs.cache-hit != 'true'

    - name: Build with XCode
      run: |
        #source ~/.bashrc
        . $(brew --prefix asdf)/libexec/asdf.sh
        xcodebuild -sdk iphonesimulator -arch arm64 -configuration Debug -scheme "example" -derivedDataPath build/

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: |
          build/Build/Products/Debug-iphonesimulator/
          build/Build/Products/**/*.app
        retention-days: 30

    - name: Get iPad Simulator UUID
      id: get_ipad_simulator_uuid
      run: |
        echo "--- Output of xcrun simctl list devices available ---"
        xcrun simctl list devices available
        echo "--- End of xcrun simctl list devices available output ---"

        # Get list of available iPad simulators - REVISED GREP and PIPELINE
        ipad_simulators=$(xcrun simctl list devices available | grep 'iPad' | grep -o '[0-9A-F-]+')

        echo "--- Raw ipad_simulators variable (REVISED) ---"
        echo "$ipad_simulators"
        echo "--- End of Raw ipad_simulators variable (REVISED) ---"

        if [[ -z "$ipad_simulators" ]]; then
          echo "::error::No available iPad simulators found."
          echo "IPAD_UUID=Shutdown" >> "$GITHUB_ENV"
          exit 1
        else
          # Get the first iPad simulator UUID from the list - SIMPLIFIED
          first_ipad_uuid=$(echo "$ipad_simulators" | head -n 1)

          echo "IPAD_UUID=$first_ipad_uuid" >> "$GITHUB_ENV"
          echo "Using iPad Simulator UUID: $first_ipad_uuid"
        fi

    - name: Boot iPad Simulator
      id: boot-simulator
      run: xcrun simctl boot ${{ steps.get_ipad_simulator_uuid.outputs.ipad_uuid }}

    - name: Install app on Simulator
      run: xcrun simctl install ${{ steps.get_ipad_simulator_uuid.outputs.ipad_uuid }} build/Build/Products/Debug-iphonesimulator/TodoApp.app # Adjust TodoApp.app if your app name is different

    - name: Launch app on Simulator
      run: xcrun simctl launch ${{ steps.get_ipad_simulator_uuid.outputs.ipad_uuid }} com.yourcompany.example.TodoApp # Replace com.yourcompany.example.TodoApp with your app's bundle identifier. You might need to get this from your Xcode project's Info.plist

    - name: Wait for a few seconds (adjust as needed)
      run: sleep 10 # Give the app time to launch and potentially generate logs

    - name: Capture Simulator Logs
      run: |
        LOG_FILE="simulator_logs.txt"
        xcrun simctl diagnose -b ${{ steps.get_ipad_simulator_uuid.outputs.ipad_uuid }} > "$LOG_FILE"
        echo "Simulator logs saved to $LOG_FILE"

    - name: Upload Simulator Logs Artifact
      uses: actions/upload-artifact@v4
      with:
        name: simulator-logs
        path: simulator_logs.txt

    - name: Take Simulator Screenshot
      run: |
        SCREENSHOT_FILE="simulator_screenshot.png"
        xcrun simctl screenshot ${{ steps.get_ipad_simulator_uuid.outputs.ipad_uuid }} "$SCREENSHOT_FILE"
        echo "Simulator screenshot saved to $SCREENSHOT_FILE"

    - name: Upload Simulator Screenshot Artifact
      uses: actions/upload-artifact@v4
      with:
        name: simulator-screenshot
        path: simulator_screenshot.png

    - name: Shutdown Simulator
      if: steps.boot-simulator.outcome == 'success'
      #if: always() # Ensure simulator is shutdown even if previous steps fail
      run: xcrun simctl shutdown ${{ steps.get_ipad_simulator_uuid.outputs.ipad_uuid }}